# ******************************************************************************
#                                    TASK
#                   To be used in the frame of "ecFlow" suites
#            (https://confluence.ecmwf.int/display/ECFLOW/ecflow+home)
# ******************************************************************************
#
#  DESCRIPTION:    this "ecFlow" task is aimed at archiving the desired "spy"
#                  files or directories in a storing directory.
#
#  EXTERNAL CALLS: none.
#
#  EXTERNAL FILES: - header managing general calls to "ecFlow" client;
#                  - suite initialisation file, specific for a certain
#                    simulation;
#                  - files (or directories) to be stored;
#                  - tail managing general calls to "ecFlow" client.
#
#  DEVELOPER:      Alessandro Minigher (alessandro.minigher@arpa.fvg.it)
#                  ARPA FVG - S.O.C. Stato dell'Ambiente - CRMA
#                  "AdriaClim" Interreg IT-HR project
#
#  CREATION DATE:  2022-01-14.
#
#  MODIFICATIONS:  none.
#
#  VERSION:        0.1.
#
# ******************************************************************************

# Include header common to all tasks, managing general calls to "ecFlow" client
%include <head.h>
# Include a specific initialisation file, peculiar to the given simulation
# (e.g. "1995F500D0_A001.ini" for simulation "1995F500D0_A001"). The basename
# (extension excluded) of this initialisation file is provided by a family
# variable
%include <etc/%SIM%.ini>

#  --- START OF FUNCTIONS ---

# Create the given directory, if not existent
mk_dir () {
    # Define the default status for the creation of the directory provided to
    # the function:
    #  - OKKO=0 -> all went OK
    #  - OKKO=1 -> something went KO
    OKKO_mkdir=0
    # Check the existence of the directory:
    #  - if it exists
    if [[ -e $1 ]]; then
        # Inform the user
        echo -e "\tDirectory: $1 exists. Ready for storing.\n"
    #  - if it does not exist
    else
        # Inform the user and create it
        echo -e "\tDirectory: $1 does not exist. Creating it..."; mkdir -p $1 || OKKO_mkdir=1
        # Check the outcome of the creation of the directory:
        #  - if all went OK
        if [[ $OKKO_mkdir -eq 0 ]]; then
            # Inform the user
            echo -e "\tDirectory: $1 successfully created. Ready for storing.\n"
        #  - if something went KO
        else
            # Inform the user and abort
            echo -e "\tERROR! Directory: $1 unsuccessfully created. ABORT..."; ERROR
        fi
    fi
}

# Move the given file or directory into the desired directory
mv_filedir () {
    # If both the file (or directory) and storing directory provided to the
    # function exist
    if [[ -e $1 ]] && [[ -e $2 ]]; then
        # Move the file (or directory) into the desired directory and inform
        # the user
        mv $1 $2; echo -e "\tFile/directory: $1 moved into $2.\n"
    fi
}

#  --- END OF FUNCTIONS ---

# Inform the user about the current directory
echo -e "\tCurrent directory: $(pwd).\n"
#
# Change directory and inform the user
echo -e "\tChange directory: moving to ${SCRATCH_SIM_ID_DIR}..."; cd $SCRATCH_SIM_ID_DIR
echo -e "\tCurrent directory: $(pwd).\n"

# Function calling: create the storing directory, if not existent
mk_dir "${DATA_SPY_ID_DIR}"
# Function calling: move the given file into the desired directory
mv_filedir "${FIGNAME_INF_T}" "${DATA_SPY_ID_DIR}"
mv_filedir "${FIGNAME_INF_S}" "${DATA_SPY_ID_DIR}"
mv_filedir "${FIGNAME_EXT_T}" "${DATA_SPY_ID_DIR}"
mv_filedir "${FIGNAME_EXT_S}" "${DATA_SPY_ID_DIR}"
mv_filedir "${FIGNAME_EXT_Z}" "${DATA_SPY_ID_DIR}"

# Include tail common to all tasks, managing general calls to "ecFlow" client
%include <tail.h>
