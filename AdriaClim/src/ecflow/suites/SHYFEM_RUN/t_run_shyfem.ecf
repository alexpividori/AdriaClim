# ******************************************************************************
#                                    TASK
#                   To be used in the frame of "ecFlow" suites
#            (https://confluence.ecmwf.int/display/ECFLOW/ecflow+home)
# ******************************************************************************
#
#  DESCRIPTION:    this "ecFlow" task is aimed at running the SHYFEM model, by
#                  the use of a job script, prepared from its related template,
#                  through a "sedfile" (see the EXTERNAL CALLS comment
#                  section).
#
#  EXTERNAL CALLS: - job template aimed at running the SHYFEM model.
#
#  EXTERNAL FILES: - header managing general calls to "ecFlow" client;
#                  - function managing the PBS queue job submission;
#                  - suite initialisation file, specific for a certain
#                    simulation;
#                  - tail managing general calls to "ecFlow" client.
#
#  DEVELOPER:      Alessandro Minigher (alessandro.minigher@arpa.fvg.it)
#                  ARPA FVG - S.O.C. Stato dell'Ambiente - CRMA
#                  "AdriaClim" Interreg IT-HR project
#
#  CREATION DATE:  2021-12-20.
#
#  MODIFICATIONS:  none.
#
#  VERSION:        0.1.
#
# ******************************************************************************

# Include header common to all tasks, managing general calls to "ecFlow" client
%include <head.h>
# Include the function managing the PBS queue job submission
%include <qsub_4_bash.h>
# Include a specific initialisation file, peculiar to the given simulation. The
# basename (extension excluded) of this initialisation file is provided by a
# family variable
%include <etc/%SIM%.ini>

# Define the default status for the submission of the desired job script:
#  - OKKO=0 -> all went OK
#  - OKKO=1 -> something went KO
OKKO=0

# Define the basename of the job to be run, starting from that of its related
# template (provided in the initialisation file peculiar to the given
# simulation)
JOB="${JOB_SHYRUN_TPL##*/}"   # consider the basename only
JOB="${JOB//.tpl/}"           # remove the ".tpl" extension

# Inform the user about the current directory
echo -e "\tCurrent directory: $(pwd).\n"

# Change directory and inform the user
echo -e "\tChange directory: moving to ${SCRATCH_SIM_ID_DIR}..."; cd $SCRATCH_SIM_ID_DIR
echo -e "\tCurrent directory: $(pwd).\n"

# Create the job to be run, starting from its related template, by the use of a
# "sedfile"
SEDFILE="$(mktemp -u ./sedfile.XXXXX)"
cat <<EOF > $SEDFILE
    s/%%%%JOB_P%%%%/$JOB_P/g
    s/%%%%JOB_W_umask%%%%/$JOB_W_umask/g
    s/%%%%JOB_W_block%%%%/$JOB_W_block/g
    s/%%%%JOB_N%%%%/$JOB_SHYRUN_TPL_N/g
    s/%%%%JOB_o%%%%/$JOB_SHYRUN_TPL_o/g
    s/%%%%JOB_e%%%%/$JOB_SHYRUN_TPL_e/g
    s/%%%%JOB_q%%%%/$JOB_q/g
    s/%%%%JOB_l_nodes%%%%/$JOB_SHYRUN_TPL_l_nodes/g
    s/%%%%JOB_l_ppn%%%%/$JOB_SHYRUN_TPL_l_ppn/g
    s/%%%%JOB_l_walltime%%%%/$JOB_SHYRUN_TPL_l_walltime/g
    s/%%%%JOB_m%%%%/$JOB_m/g
    s/%%%%JOB_M%%%%/$JOB_M/g
    s/%%%%SHY_MOD%%%%/${SHY_MOD//\//\\/}/g
    s/%%%%SHY_SHYFEM%%%%/${SHY_SHYFEM//\//\\/}/g
    s/%%%%SHY_STR_FILENAME%%%%/${SHY_STR_FILENAME//\//\\/}/g
EOF
sed -f $SEDFILE $JOB_SHYRUN_TPL > $JOB
# Check the outcome of the creation of the job and if the job itself exists:
#  - if all went OK and the job exists
if [[ $? -eq 0 ]] && [[ -e $JOB ]]; then
    # Inform the user
    echo -e "\tJob: ${JOB} successfully created. Submitting to HPC queues..."
#  - if something went KO or the job does not exist
else
    # Inform the user and abort
    echo -e "\tERROR! Job: ${JOB} unsuccessfully created. ABORT..."; ERROR
fi

# Submit the job to HPC queues
ecflow_qsub $JOB || OKKO=1
# Check the outcome of the submission:
#  - if all went OK
if [[ OKKO -eq 0 ]]; then
    # Inform the user
    echo -e "\tJob: ${JOB} successfully submitted to HPC queues."
#  - if something went KO
else
    # Inform the user and abort
    echo -e "\tERROR! Job: ${JOB} unsuccessfully submitted to HPC queues. ABORT..."; ERROR
fi

# If the job exists
if [[ -e $JOB ]]; then
    # Remove it and inform the user
    rm $JOB; echo -e "\tJob: ${JOB} removed.\n"
fi

# If the "sedfile" exists
if [[ -e $SEDFILE ]]; then
    # Remove it and inform the user
    rm $SEDFILE; echo -e "\tFile: ${SEDFILE} removed."
fi

# Include tail common to all tasks, managing general calls to "ecFlow" client
%include <tail.h>
