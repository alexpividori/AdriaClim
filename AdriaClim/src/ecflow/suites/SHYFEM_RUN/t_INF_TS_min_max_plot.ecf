# ******************************************************************************
#                                    TASK
#                   To be used in the frame of "ecFlow" suites
#            (https://confluence.ecmwf.int/display/ECFLOW/ecflow+home)
# ******************************************************************************
#
#  DESCRIPTION:    this "ecFlow" task is aimed at drawing the two following
#                  types of plots, by using the information retrieved in the
#                  log INF file of the desired simulation (see the EXTERNAL
#                  FILES comment section):
#                   - time series of minimum and maximum water temperature of
#                     the whole basin, from the first time step onwards;
#                   - time series of minimum and maximum salinity of the whole
#                     basin, from the first time step onwards.
#                  Plots are drawn every N minutes, from the simulation's
#                  start, until the simulation's end; N is provided by the user
#                  through an initialisation file (see the EXTERNAL FILES
#                  comment section). Plots are drawn by the use of a job
#                  script, prepared from its related template, through a
#                  "sedfile" (see the EXTERNAL CALLS comment section).
#
#  EXTERNAL CALLS: - job template aimed at drawing the types of plots listed
#                    above.
#
#  EXTERNAL FILES: - header managing general calls to "ecFlow" client;
#                  - function managing the PBS queue job submission;
#                  - suite initialisation file, specific for a certain
#                    simulation;
#                  - log INF file: SHYFEM run's log file (.inf);
#                  - run status file: ASCII file containing only one digit (0
#                    when the run started, 1 when the run ended);
#                  - tail managing general calls to "ecFlow" client.
#
#  DEVELOPER:      Alessandro Minigher (alessandro.minigher@arpa.fvg.it)
#                  ARPA FVG - S.O.C. Stato dell'Ambiente - CRMA
#                  "AdriaClim" Interreg IT-HR project
#
#  CREATION DATE:  2021-12-23.
#
#  MODIFICATIONS:  none.
#
#  VERSION:        0.1.
#
# ******************************************************************************

# Include header common to all tasks, managing general calls to "ecFlow" client
%include <head.h>
# Include the function managing the PBS queue job submission
%include <qsub_4_bash.h>
# Include a specific initialisation file, peculiar to the given simulation. The
# basename (extension excluded) of this initialisation file is provided by a
# family variable
%include <etc/%SIM%.ini>

#  --- START OF FUNCTIONS ---

# Remove the given file, if existent
rm_file () {
    # If the file provided to the function exists
    if [[ -e $1 ]]; then
        # Remove it and inform the user
        rm $1; echo -e "\tFile: $1 removed.\n"
    fi
}

# Remove the given job, if existent
rm_job () {
    # If the job provided to the function exists
    if [[ -e $1 ]]; then
        # Remove it and inform the user
        rm $1; echo -e "\tJob: $1 removed.\n"
    fi
}

#  --- END OF FUNCTIONS ---

# Define the default status for the submission of the desired job script:
#  - OKKO=0 -> all went OK
#  - OKKO=1 -> something went KO
OKKO=0
# Define the default status for the "grep" operations:
#  - GOON=0 -> successful grep
#  - GOON=1 -> unsuccessful grep
GOON_T=0   # temperature
GOON_S=0   # salinity

# Define the basename of the job to be run, starting from that of its related
# template (provided in the initialisation file peculiar to the given
# simulation)
JOB="${JOB_INFPLOT_TPL##*/}"   # consider the basename only
JOB="${JOB//.tpl/}"            # remove the ".tpl" extension

# Define two temporary files, aimed at containing the desired data to be
# plotted
INF_FILE_GREP_T="$(mktemp -u temp.XXXXX)"
INF_FILE_GREP_S="$(mktemp -u salt.XXXXX)"

# Inform the user about the current directory
echo -e "\tCurrent directory: $(pwd).\n"

# Change directory and inform the user
echo -e "\tChange directory: moving to ${SCRATCH_SIM_ID_DIR}..."; cd $SCRATCH_SIM_ID_DIR
echo -e "\tCurrent directory: $(pwd).\n"

# Create the job to be run, starting from its related template, by the use of
# a "sedfile"
SEDFILE="$(mktemp -u ./sedfile.XXXXX)"
cat <<EOF > $SEDFILE
    s/%%%%JOB_P%%%%/$JOB_P/g
    s/%%%%JOB_W_umask%%%%/$JOB_W_umask/g
    s/%%%%JOB_W_block%%%%/$JOB_W_block/g
    s/%%%%JOB_N%%%%/$JOB_INFPLOT_TPL_N/g
    s/%%%%JOB_o%%%%/$JOB_INFPLOT_TPL_o/g
    s/%%%%JOB_e%%%%/$JOB_INFPLOT_TPL_e/g
    s/%%%%JOB_q%%%%/$JOB_q/g
    s/%%%%JOB_l_nodes%%%%/$JOB_INFPLOT_TPL_l_nodes/g
    s/%%%%JOB_l_ppn%%%%/$JOB_INFPLOT_TPL_l_ppn/g
    s/%%%%JOB_l_walltime%%%%/$JOB_INFPLOT_TPL_l_walltime/g
    s/%%%%JOB_m%%%%/$JOB_m/g
    s/%%%%JOB_M%%%%/$JOB_M/g
    s/%%%%PY_MOD%%%%/${PY_MOD//\//\\/}/g
    s/%%%%MINICONDA3_MOD%%%%/${MINICONDA3_MOD//\//\\/}/g
    s/%%%%INF_FILE_GREP_T%%%%/$INF_FILE_GREP_T/g
    s/%%%%INF_FILE_GREP_S%%%%/$INF_FILE_GREP_S/g
    s/%%%%TITLE_INF%%%%/$TITLE_INF/g
    s/%%%%XAXIS_INF%%%%/$XAXIS_INF/g
    s/%%%%YAXIS_INF_T%%%%/$YAXIS_INF_T/g
    s/%%%%YAXIS_INF_S%%%%/$YAXIS_INF_S/g
    s/%%%%FIGNAME_INF_T%%%%/$FIGNAME_INF_T/g
    s/%%%%FIGNAME_INF_S%%%%/$FIGNAME_INF_S/g
EOF
sed -f $SEDFILE $JOB_INFPLOT_TPL > $JOB
# Check the outcome of the creation of the job and if the job itself exists:
#  - if all went OK and the job exists
if [[ $? -eq 0 ]] && [[ -e $JOB ]]; then
    # Inform the user
    echo -e "\tJob: ${JOB} successfully created. Submitting to HPC queues...\n"
#  - if something went KO or the job does not exist
else
    # Inform the user and abort
    echo -e "\tERROR! Job: ${JOB} unsuccessfully created. ABORT..."; ERROR
fi

# Define the run status by reading the run status file:
#  - 0 -> run started (running)
#  - 1 -> run completed
RUN_STATUS=$(<$RUN_STATUS_FILENAME)
# While the simulation is running, but it is not completed yet
while [ $RUN_STATUS -ne 1 ]; do
    # Wait the desired number of seconds
    sleep $(( SPY_SLEEP_MIN*60 ))
    # Check if the log file exists:
    #  - if it exists
    if [[ -e $SHY_INF_FILENAME ]]; then
        # Inform the user
        echo -e "\tFile: ${SHY_INF_FILENAME} exists."
        # Grep the desired content (time series of minimum and maximum sea
        # temperature, of the entire domain) from SHYFEM's INF (.inf) file,
        # redirecting the standard output to a temporary file
        grep " temp: " $SHY_INF_FILENAME > $INF_FILE_GREP_T || GOON_T=1
        # Grep the desired content (time series of minimum and maximum
        # salinity, of the entire domain) from SHYFEM's INF (.inf) file,
        # redirecting the standard output to a temporary file
        grep " salt: " $SHY_INF_FILENAME > $INF_FILE_GREP_S || GOON_S=1
        # Check the outcome of the "grep" operations:
        #  - if they were both successful
        if [[ GOON_T -eq 0 ]] && [[ GOON_S -eq 0 ]]; then
            # Inform the user
            echo -e "\tFile: ${SHY_INF_FILENAME}, content available to be plotted.\n"
            # Submit the job to HPC queues
            ecflow_qsub $JOB || OKKO=1
            # Check the outcome of the submission:
            #  - if all went OK
            if [[ OKKO -eq 0 ]]; then
                # Inform the user and copy the outputs (figures) produced by
                # the job in the directory aimed at containing all the stuff
                # related to the "spy" of the specific simulation, to be
                # published on the Net
                echo -e "\tJob: ${JOB} successfully submitted to HPC queues.\n"
                cp *$FIG_FORMAT $PUB_HTML_SHY_SPY_SIM_DIR; echo -e "\tFigures: copied in ${PUB_HTML_SHY_SPY_SIM_DIR}.\n"
            #  - if something went KO
            else
                # Inform the user and abort
                echo -e "\tERROR! Job: ${JOB} unsuccessfully submitted to HPC queues. ABORT..."; ERROR
            fi
        #  - if at least one of them was unsuccessful
        else
            # Inform the user
            echo -e "\tFile: ${SHY_INF_FILENAME}, content not available to be plotted yet. Please wait...\n"
        fi
        # Function calling: remove temporary files, if existent
        rm_file "${INF_FILE_GREP_T}"
        rm_file "${INF_FILE_GREP_S}"

    #  - if it does not exist
    else
        # Inform the user
        echo -e "\tFile: ${SHY_INF_FILENAME} does not exists yet. Please wait..."
    fi

    # Reset the default status for "grep" operations
    GOON_T=0
    GOON_S=0

    # Redefine the run status by reading the run status file:
    #  - 0 -> run started (running)
    #  - 1 -> run completed
    RUN_STATUS=$(<$RUN_STATUS_FILENAME)
done

# Function calling: remove the job, if existent
rm_job "${JOB}"
# Function calling: remove the "sedfile", if existent
rm_file "${SEDFILE}"

# Include tail common to all tasks, managing general calls to "ecFlow" client
%include <tail.h>
