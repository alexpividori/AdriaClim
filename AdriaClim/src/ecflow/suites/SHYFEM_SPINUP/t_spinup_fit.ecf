# ******************************************************************************
#                                    TASK
#                   To be used in the frame of "ecFlow" suites
#            (https://confluence.ecmwf.int/display/ECFLOW/ecflow+home)
# ******************************************************************************
#
#  DESCRIPTION:    this "ecFlow" task is aimed at estimating the spin-up time
#                  of the numerical model providing the couple of simulations
#                  to be compared, according to a regression analysis.
#                  Specifically, the spin-up time is estimated for a certain
#                  oceanographic variable and for all the EXT nodes and layers
#                  (3D variables) to be analysed, and printed in an output
#                  file. The fit is performed on the time series of the sum of
#                  the differences between the two simulations, computed from
#                  each time step onward, and the regression function is
#                  piecewise (first parabolic, then constant) and continuous.
#                  All the regression plots are drawn.
#                  Printing and plotting are performed by the use of a job
#                  script, prepared from its related template, through a
#                  "sedfile" (see the EXTERNAL CALLS comment section).
#
#  EXTERNAL CALLS: - job template aimed at creating and running a Python 3
#                    script, the aim of which is described in the following.
#                    The Python 3 script created through the job template is
#                    aimed at estimating the spin-up time of the numerical
#                    model providing the couple of simulations to be compared,
#                    according to a regression analysis. Specifically, the
#                    spin-up time is estimated for a certain oceanographic
#                    variable and for all the EXT nodes and layers (3D
#                    variables) to be analysed, and printed in an output file.
#                    The fit is performed on the time series of the sum of the
#                    differences between the two simulations, computed from
#                    each time step onward, and the regression function is
#                    piecewise (first parabolic, then constant) and continuous.
#                    All the regression plots are drawn.
#
#  EXTERNAL FILES: - header managing general calls to "ecFlow" client;
#                  - suite initialisation file, specific for a certain
#                    simulation;
#                  - suite initialisation file, specific for a certain
#                    variable (e.g. T, S, u, v, z);
#                  - tail managing general calls to "ecFlow" client.
#
#  DEVELOPER:      Alessandro Minigher (alessandro.minigher@arpa.fvg.it)
#                  ARPA FVG - S.O.C. Stato dell'Ambiente - CRMA
#                  "AdriaClim" Interreg IT-HR project
#
#  CREATION DATE:  2021-11-05.
#
#  MODIFICATIONS:  2021-11-10 -> addition of the variables named
#                                "EXT_NODES_FILE", "EXT_NODES_INFO_START" and
#                                "EXT_NODES_INFO_END" in the "here document".
#                  2021-11-12 -> addition of the variables named "A_FIT" and
#                                "B_FIT" in the "here document".
#                  2021-11-16 -> addition of the variable "named" SUBTITLE_FIT
#                                in the "here document".
#
#  VERSION:        0.4.
#
# ******************************************************************************

# Include header common to all tasks, managing general calls to "ecFlow" client
%include <head.h>
# Include a specific initialisation file, peculiar to a given simulation
# (files of this type are assumed to be identical, except for the
# identification code of the simulation, SHY_SIM_ID). The basename (extension
# excluded) of this initialisation file is provided by a suite variable
%include <etc/%SIMA%.ini>
# Include a specific initialisation file, peculiar to the given variable (e.g.
# T, S, u, v, z). The basename (extension exluded, but dot included) of this
# initialisation file is provided by a family variable
%include <etc/%TOPROC%ini>

# **********************
#  START OF MAIN SCRIPT
# **********************

# Define the default status for the submission of the desired job script:
#  - OKKO=0 -> all went OK
#  - OKKO=1 -> something went KO
OKKO=0
# Define the default status for the creation of directories:
#  - OKKO_mkdir=0 -> all went OK
#  - OKKO_mkdir=1 -> something went KO
OKKO_mkdir=0
# Define the name (full path) of a working directory (to be removed after
# its usage), by the use of both suite variables and variables retrieved in
# the initialisation file peculiar to the simulations
work_dir="${SCRATCH_DIR}/$(mktemp -u %TOPROC%XXXXX)"
# Define the basename of the job to be used to compute spin-up time statistics
JOB="${JOB_EXTFIT_TPL##*/}"   # consider the basename only
JOB="${JOB//.tpl/}"           # remove the ".tpl" extension
# Define the name of the directory aimed at storing post-processing files
# related to spin-up tests, for a given variable, by the use of variables
# retrieved in the initialisation files
SHY_POSTPROC_SPINUP_SIMS_VAR_DIR="${SHY_POSTPROC_SPINUP_SIMS_DIR}/${VAR}"
# Define the name (full path) of the file to be processed by the job
FILE2PROC="${SHY_POSTPROC_SPINUP_SIMS_VAR_DIR}/${SPINUP_SUM_DIFF_FILENAME}"

# Inform the user about the current directory
echo -e "\n\tCurrent directory: $(pwd).\n"

# Check if the working directory is already existent:
#  - if it already exists
if [[ -e $work_dir ]]; then
    # Inform the user and remove it
    echo -e "\n\tDirectory: ${work_dir} already exists. Removing it and creating it from scratch...\n"
    rm -r $work_dir
#  - if it does not exist
else
    # Inform the user
    echo -e "\n\tDirectory: ${work_dir} does not exist. Creating it...\n"
fi
# Create the working directory
mkdir $work_dir || OKKO_mkdir=1
# Check the outcome of the creation of the working directory:
#  - if all went OK
if [[ OKKO_mkdir -eq 0 ]]; then
    # Inform the user
    echo -e "\tDirectory: ${work_dir} successfully created.\n"
#  - if something went KO
else
    # Inform the user and abort
    echo -e "\tERROR! Directory: ${work_dir} unsuccessfully created. ABORT...\n"; ERROR
fi
# Move to the working directory, informing the user
echo -e "\n\tChange directory: moving to ${work_dir}...\n"; cd $work_dir
echo -e "\tCurrent directory: $(pwd).\n"

# Prepare the job to be used to compute spin-up time statistics, starting from
# its related template, by the use of a "sedfile"
SEDFILE="$(mktemp -u ./sedfile.XXXXX)"
cat <<EOF > $SEDFILE
    s/%%%%JOB_P%%%%/$JOB_P/g
    s/%%%%JOB_W_umask%%%%/$JOB_W_umask/g
    s/%%%%JOB_W_block%%%%/$JOB_W_block/g
    s/%%%%JOB_N%%%%/$JOB_EXTFIT_TPL_N/g
    s/%%%%JOB_o%%%%/$JOB_EXTFIT_TPL_o/g
    s/%%%%JOB_e%%%%/$JOB_EXTFIT_TPL_e/g
    s/%%%%JOB_q%%%%/$JOB_q/g
    s/%%%%JOB_l_nodes%%%%/$JOB_EXTFIT_TPL_l_nodes/g
    s/%%%%JOB_l_ppn%%%%/$JOB_EXTFIT_TPL_l_ppn/g
    s/%%%%JOB_l_walltime%%%%/$JOB_EXTFIT_TPL_l_walltime/g
    s/%%%%JOB_m%%%%/$JOB_m/g
    s/%%%%JOB_M%%%%/$JOB_M/g
    s/%%%%PY_MOD%%%%/${PY_MOD//\//\\/}/g
    s/%%%%MINICONDA3_MOD%%%%/${MINICONDA3_MOD//\//\\/}/g
    s/%%%%SHY_POSTPROC_SPINUP_SIMS_VAR_DIR%%%%/${SHY_POSTPROC_SPINUP_SIMS_VAR_DIR//\//\\/}/g
    s/%%%%SIMA%%%%/%SIMA%/g
    s/%%%%SIMB%%%%/%SIMB%/g
    s/%%%%X0_FIT%%%%/$X0_FIT/g
    s/%%%%A_FIT%%%%/$A_FIT/g
    s/%%%%B_FIT%%%%/$B_FIT/g
    s/%%%%FILE2PROC%%%%/${FILE2PROC//\//\\/}/g
    s/%%%%TOPROC%%%%/%TOPROC%/g
    s/%%%%SPINUP_FIT_FILENAME%%%%/$SPINUP_FIT_FILENAME/g
    s/%%%%XAXIS_FIT%%%%/${XAXIS_FIT//\//\\/}/g
    s/%%%%YAXIS_FIT%%%%/${YAXIS_FIT//\//\\/}/g
    s/%%%%FIG_FORMAT%%%%/$FIG_FORMAT/g
    s/%%%%EXT_NODES_FILE%%%%/${EXT_NODES_FILE//\//\\/}/g
    s/%%%%EXT_NODES_INFO_START%%%%/$EXT_NODES_INFO_START/g
    s/%%%%EXT_NODES_INFO_END%%%%/$EXT_NODES_INFO_END/g
    s/%%%%SUBTITLE_FIT%%%%/$SUBTITLE_FIT/g
    s/%%%%REGRESSION_PLOTS_ARCHIVE%%%%/$REGRESSION_PLOTS_ARCHIVE/g
EOF
sed -f $SEDFILE $JOB_EXTFIT_TPL > $JOB
# Check the outcome of the preparation of the job:
#  - if all went OK
if [[ $? -eq 0 ]]; then
    # Inform the user
    echo -e "\n\tJob: ${JOB} successfully created.\n"
#  - if something went KO
else
    # Inform the user and abort
    echo -e "\n\tERROR! Job: ${JOB} unsuccessfully created. ABORT...\n"; ERROR
fi
# If the "sedfile" exists, remove it
if [[ -e $SEDFILE ]];then rm $SEDFILE; fi

# Check if the job exists:
#  - if it exists
if [[ -e $JOB ]]; then
    # Inform the user
    echo -e "\tJob: ${JOB} exists. Submitting to HPC queues...\n"
#  - if it does not exist
else
    # Inform the user and abort
    echo -e "\tERROR! Job: ${JOB} does not exist. ABORT...\n"; ERROR
fi
# Submit the job to HPC queues, to compute spin-up time statistics
qsub $JOB || OKKO=1
# Check the outcome of the submission:
#  - if all went OK
if [[ OKKO -eq 0 ]]; then
    # Inform the user
    echo -e "\tJob: ${JOB} successfully submitted to HPC queues.\n"
#  - if something went KO
else
    # Inform the user and abort
    echo -e "\tERROR! Job: ${JOB} unsuccessfully submitted to HPC queues. ABORT...\n"; ERROR
fi

# Remove the working directory, informing the user
sleep 3
rm -r $work_dir
echo -e "\n\tDirectory: ${work_dir} removed.\n"

# ********************
#  END OF MAIN SCRIPT
# ********************

# Include tail common to all tasks, managing general calls to "ecFlow" client
%include <tail.h>
